1
00:00:00,000 --> 00:00:05,919
कल Anthropic ने आखिरकार Clawed 3.7 Sonnet जारी कर दिया, जोकि बहुप्रतीक्षित बड़ा भाषा मॉडल है

2
00:00:05,919 --> 00:00:10,640
जिसे प्रोग्रामर सबसे ज्यादा प्यार और डरते भी हैं। उनकी घोषणा वीडियो ने सभी को हैरान कर दिया है,

3
00:00:10,640 --> 00:00:14,720
और उस वीडियो पर सबसे ऊपर की टिप्पणी लोगों का इस वीडियो का इंतजार कर रहे हैं। और मैं बस इतना कहना चाहूँगा,

4
00:00:14,720 --> 00:00:18,480
मैं विनम्र और सम्मानित महसूस कर रहा हूँ कि आपने मेरे आधे-अधूरे AI समीक्षाओं में इतना विश्वास रखा।

5
00:00:18,480 --> 00:00:22,800
मैंने इसे परखने में लाखों टोकन पहले ही खर्च कर दिए हैं, और TLDR यह है कि Clawed 3.7

6
00:00:22,800 --> 00:00:27,679
एकदम धमाकेदार है। यह अलग ही लेवल का है, भगवान पर कोटिंग की हुई, बिलकुल सच।

7
00:00:27,679 --> 00:00:32,079
नया बेस मॉडल खुद को प्रोग्रामिंग में और भी बेहतर बनाने के लिए, एक नया सोचने का तरीका जोड़ते हुए

8
00:00:32,079 --> 00:00:37,679
DeepSeq R1 और OpenAI O मॉडल की सफलता की नकल करने के लिए जारी किया गया है। लेकिन सबसे पागलपन भरी चीज़ जो उन्होंने जारी की

9
00:00:37,679 --> 00:00:42,799
Clawed Code कहलाती है, एक CLI टूल जो आपको किसी भी प्रोजेक्ट में कोड बनाने, परखने और चलाने की अनुमति देता है

10
00:00:42,799 --> 00:00:47,520
इस प्रकार एक अनंत फीडबैक लूप बनाता है जो सिद्धांत रूप में सभी प्रोग्रामरों को बदल देना चाहिए।

11
00:00:47,520 --> 00:00:51,520
सभी कोड इन्फ्लुएंसर हमें बता रहे हैं कि हम पक गए हैं, और आज के वीडियो में हम पता लगाएंगे कि क्या वे

12
00:00:51,520 --> 00:00:56,640
सही हैं। आज 25 फ़रवरी, 2025 है, और आप कोड रिपोर्ट देख रहे हैं। कुछ हफ़्ते पहले,

13
00:00:56,640 --> 00:01:01,600
Anthropic ने एक पेपर जारी किया जिसमें अध्ययन किया गया कि AI श्रम शक्ति को कैसे प्रभावित करता है। और उन्होंने जो पाया वह है

14
00:01:01,600 --> 00:01:07,439
कि केवल 3.4% कार्यबल होने के बावजूद, 37% से अधिक प्रॉम्प्ट गणित और

15
00:01:07,439 --> 00:01:12,560
कोडिंग से संबंधित हैं। और हालाँकि इसने अभी तक किसी मानव प्रोग्रामर की नौकरी नहीं छीनी है, लेकिन इसने Stack Overflow की नौकरी छीन ली है।

16
00:01:12,560 --> 00:01:16,480
अब, वहाँ बहुत सारे AI स्लॉट बोर्ड हैं, और उन सभी पर नज़र रखना मुश्किल है, लेकिन वेब के लिए

17
00:01:16,480 --> 00:01:21,760
डेवलपमेंट, बेहतर संकेतकों में से एक WebDev Arena है। और Clawed 3.5, पिछला संस्करण,

18
00:01:21,760 --> 00:01:25,760
पहले से ही उस लीडरबोर्ड में सबसे ऊपर बैठा है। लेकिन यह अन्य सभी के साथ लगभग बराबर था

19
00:01:25,760 --> 00:01:30,239
अत्याधुनिक मॉडल जब सॉफ्टवेयर इंजीनियरिंग बेंचमार्क की बात आती है, जो मानव-सत्यापित है

20
00:01:30,239 --> 00:01:35,599
और वास्तविक GitHub समस्याओं पर आधारित है। हालांकि पागलपन भरी बात यह है कि नया 3.7 मॉडल पूरी तरह से कुचल दिया

21
00:01:35,599 --> 00:01:41,120
अन्य सभी मॉडल, जिसमें OpenAI, O3 Mini-High, और Deepseek शामिल हैं, और अब GitHub समस्याओं को हल करने में सक्षम है

22
00:01:41,120 --> 00:01:46,079
70.3%। अर्थात, अगर हमें बेंचमार्क पर विश्वास करना है। और Cloud Code CLI को आज़माने के बाद,

23
00:01:46,079 --> 00:01:50,959
मैं वास्तव में इस पर विश्वास कर सकता हूँ। यह वर्तमान में शोध पूर्वावलोकन में है, लेकिन आप इसे स्थापित कर सकते हैं

24
00:01:51,040 --> 00:01:56,719
NPM के साथ Cloud CLI। हालांकि अस्वीकरण, यह सीधे Anthropic API का उपयोग करता है, और Clawed नहीं है

25
00:01:56,719 --> 00:02:01,840
सस्ता, Gemini Flash और Deepseek जैसे मॉडल से 10 गुना अधिक महंगा है। $15 प्रति मिलियन

26
00:02:01,840 --> 00:02:06,480
Alpatokins मेरी पूरी पर्सनालिटी से ज़्यादा महंगा है। एक बार स्थापित करने के बाद, आपको Clawed तक पहुँच मिलेगी

27
00:02:06,480 --> 00:02:10,639
कमांड और टर्मिनल। और यह आपके प्रोजेक्ट में मौजूदा कोड का पूरा संदर्भ देता है।

28
00:02:10,639 --> 00:02:14,960
हालांकि मैंने तुरंत एक बात देखी कि CLI में उनकी टेक्स्ट डेकोरेशन लगभग दिखती है

29
00:02:14,960 --> 00:02:19,280
SST के समान, एक ओपन-सोर्स टूल जिसे हमने पहले इस चैनल पर कवर किया है। यह एक

30
00:02:19,280 --> 00:02:24,080
संयोग हो सकता है, लेकिन ऐसा प्रतीत होता है कि क्लाउड लोगो को भी मेरे पसंदीदा लेखकों में से एक, कर्ट वोनेगट के इस चित्र के आधार पर साहित्यिक चोरी किया जा सकता है।

31
00:02:24,080 --> 00:02:27,919
लेकिन स्फिंक्टर के बाद अपने लोगो को डिज़ाइन करने में कोई बुराई नहीं है, बहुत सी कंपनियाँ ऐसा करती हैं, लेकिन मुझे लगता है कि Clawed थोड़ा बहुत ज़्यादा है

32
00:02:27,919 --> 00:02:32,000
यहाँ नाक पर। लेकिन अब जब मैंने Clawed स्थापित कर लिया है, तो मैं Enit कमांड चला सकता हूँ, जो

33
00:02:32,000 --> 00:02:36,240
प्रोजेक्ट को स्कैन करेगा और कुछ प्रारंभिक संदर्भ और निर्देशों के साथ एक मार्कडाउन फ़ाइल बनाएगा। यह अच्छा है,

34
00:02:36,240 --> 00:02:40,560
लेकिन अब हमारे पास एक खुला सत्र है, और एक चीज़ जो आप करना चाहेंगे वह यह देखना है कि आपने कितना पैसा

35
00:02:40,560 --> 00:02:44,400
अब तक प्रॉम्प्ट करके खो दिया है। cost कमांड के साथ, मैं देख सकता हूँ कि उस Enit फ़ाइल को बनाने में लगभग

36
00:02:44,400 --> 00:02:49,120
8 सेंट का खर्च आया। अब पहला वास्तविक काम जो मैंने इसे दिया वह बहुत आसान था, और वह था एक यादृच्छिक नाम बनाना

37
00:02:49,120 --> 00:02:53,599
Dino में जनरेटर। प्रॉम्प्ट दर्ज करने के बाद, यह पता लगाएगा कि क्या करना है, और फिर आपको

38
00:02:53,599 --> 00:02:57,840
हाँ या ना से इसकी पुष्टि करने के लिए कहेगा। जैसे इस मामले में, यह एक नई फ़ाइल बनाना चाहता है। यह आगे बढ़ेगा

39
00:02:57,840 --> 00:03:02,560
और उस फ़ाइल को फ़ाइल सिस्टम में लिख देगा, और फिर यह एक समर्पित परीक्षण फ़ाइल भी बनाता है

40
00:03:02,560 --> 00:03:06,719
साथ ही। यह महत्वपूर्ण है क्योंकि टेस्ट-संचालित विकास के साथ एक दृढ़ता से टाइप की गई भाषा का उपयोग करना

41
00:03:06,719 --> 00:03:11,280
या AI के लिए यह मान्य करने के तरीके कि जो कोड यह लिखता है वह वास्तव में मान्य है। यदि वह परीक्षण विफल हो जाता है,

42
00:03:11,280 --> 00:03:15,680
यह फ़ीडबैक का उपयोग व्यावसायिक तर्क को फिर से लिखने के लिए कर सकता है, और तब तक आगे-पीछे होता रह सकता है जब तक कि यह

43
00:03:15,759 --> 00:03:20,000
इसे सही नहीं कर लेता। और इस उदाहरण में, इसने वही लिखा है जिसे मैं एकदम सही कोड मानूँगा। लेकिन अब आइए करते हैं

44
00:03:20,000 --> 00:03:24,240
कुछ और चुनौतीपूर्ण और इसे एक वास्तविक दृश्य फ्रंट एंड UI बनाने के लिए कहें, लेकिन React के बजाय,

45
00:03:24,240 --> 00:03:28,879
Svelte का उपयोग करेगा। जब मैंने कॉन्फ़िगरेशन उत्पन्न किया, तो आप देखेंगे कि यह समझता है कि तकनीकी स्टैक है

46
00:03:28,879 --> 00:03:33,199
TypeScript और tailwind का उपयोग कर रहा है, और फिर मैं इसे एक मध्यम जटिल फ्रंट एंड UI के लिए प्रॉम्प्ट करूँगा,

47
00:03:33,199 --> 00:03:37,680
एक ऐसा एप्लिकेशन जो मेरे माइक्रोफ़ोन तक पहुँच सकता है और तरंग को दर्शा सकता है। इस प्रारंभिक प्रॉम्प्ट के बाद,

48
00:03:37,680 --> 00:03:42,800
मुझे लगभग 20 अलग-अलग चीजों की पुष्टि करनी पड़ी, और जैसा कि आप देख सकते हैं, इसने मेरे प्रोजेक्ट में बहुत सारे नए घटक लिखे हैं

49
00:03:42,800 --> 00:03:47,120
मेरे प्रोजेक्ट में। इसमें वेब UI में क्लाउड को प्रॉम्प्ट करने से बहुत अधिक समय लगा, लेकिन अंतिम परिणाम

50
00:03:47,120 --> 00:03:51,840
इंतजार के लायक था। यहाँ एप्लिकेशन में, मैं एक तरंग आवृत्ति और गोलाकार के माध्यम से क्लिक कर सकता हूँ

51
00:03:51,840 --> 00:03:56,560
ग्राफिक जो मेरी आवाज़ की ध्वनि को दर्शाता है। एक नियंत्रण के रूप में, मैंने OpenAI-03 मिनी-हाई को उत्पन्न किया

52
00:03:56,560 --> 00:04:02,400
वही चीज़, और पहले मुझे एक त्रुटि मिली, जिसे ठीक करना आसान था, लेकिन अंतिम परिणाम इस तरह दिखता था,

53
00:04:02,400 --> 00:04:07,199
क्लाउड की तुलना में एक शर्मनाक टुकड़ा। लेकिन करीब से निरीक्षण करने पर, बहुत सारी

54
00:04:07,199 --> 00:04:11,599
क्लाउड के कोड में समस्याएँ थीं। जैसे कि एक के लिए, इसने बिल्कुल भी TypeScript या tailwind का उपयोग नहीं किया,

55
00:04:11,599 --> 00:04:15,919
भले ही इसे पता होना चाहिए कि वे हमारे तकनीकी स्टैक में हैं। यह नए का उपयोग करने में भी विफल रहा

56
00:04:15,919 --> 00:04:19,199
Smelt 5 Roons सिंटैक्स, और पूरे सत्र में मुझे लगभग 65 सेंट का खर्च आया, जो

57
00:04:19,199 --> 00:04:23,759
A या केले पर बेहतर खर्च किया गया होता। लेकिन अब मेरे पास एक अंतिम परीक्षण है। हाल ही में, Apple को बंद करना पड़ा

58
00:04:23,759 --> 00:04:29,439
यूके में एंड-टू-एंड एन्क्रिप्शन, क्योंकि सरकार एक बैकडोर चाहती थी, और Apple ने मना कर दिया

59
00:04:29,439 --> 00:04:34,000
एक बनाना। यदि आप इससे प्रभावित हुए हैं, तो एक चीज़ जो आप कर सकते हैं वह है अपना खुद का एंड-टू-एंड बनाना

60
00:04:34,000 --> 00:04:37,839
एन्क्रिप्टेड ऐप। मैं खुद जावास्क्रिप्ट में ऐसा करने की कोशिश कर रहा हूँ, लेकिन हर एक बड़ा भाषा

61
00:04:37,920 --> 00:04:42,079
मॉडल जिसकी मैंने कोशिश की है वह विफल हो जाता है। आइए देखें कि क्या क्लाउड इस Chatchy PT कचरा कोड को ठीक कर सकता है। इसमें लगा

62
00:04:42,079 --> 00:04:47,120
काफी समय और कोड को बहुत बदल दिया, लेकिन किसी भी कारण से, यह अभी भी चलने में विफल रहता है। और

63
00:04:47,120 --> 00:04:51,600
दुर्भाग्य से, क्योंकि मैं AI पर इतना निर्भर हो गया हूँ, मुझे नहीं पता कि त्रुटि संदेश को कैसे ठीक किया जाए

64
00:04:51,600 --> 00:04:55,920
जैसे यह। और मैं वास्तव में केवल अगले सर्वश्रेष्ठ मॉडल के आने का इंतजार कर सकता हूँ। इस दौरान

65
00:04:55,920 --> 00:04:59,759
वीडियो में, हमने देखा है कि क्लाउड फ्रंट-एंड डेव में कितना अच्छा है, लेकिन आपके एप्लिकेशन का दूसरा आधा हिस्सा है

66
00:04:59,759 --> 00:05:04,399
बैक-एंड। और अगर आपको ऐप्स तेज़ी से बनाना पसंद है, तो आपको आज के प्रायोजक को आज़माना होगा

67
00:05:04,480 --> 00:05:09,279
वीडियो। यह एक ओपन-सोर्स रिएक्टिव डेटाबेस है जो टाइप-सेफ क्वेरी, शेड्यूल्ड जॉब प्रदान करता है,

68
00:05:09,279 --> 00:05:14,560
सर्वर फ़ंक्शन, रीयल-टाइम डेटा सिंक जैसे Firebase, बस इसकी कुछ विशेषताओं का नाम लेने के लिए।

69
00:05:14,560 --> 00:05:19,199
हालांकि डेटाबेस क्वेरी शुद्ध TypeScript में लिखी गई हैं, हमें यह सुंदर दे रही हैं

70
00:05:19,199 --> 00:05:23,600
IDE ऑटो-कम्प्लीट पूरे स्टैक में। लेकिन यह एक और साइड इफेक्ट भी बनाता है,

71
00:05:23,600 --> 00:05:28,240
convex को AI के साथ स्वायत्त वाइब कोडिंग में वास्तव में अच्छा बना रहा है। क्लाउड जैसे मॉडल अधिक आसानी से

72
00:05:28,240 --> 00:05:33,680
convex कोड को समझ सकते हैं, इसे कम त्रुटियों के साथ लिख सकते हैं, और इस प्रकार इसके साथ अधिक उत्पादक हो सकते हैं। यदि आप जानते हैं

73
00:05:33,680 --> 00:05:38,560
कि फ्रंट-एंड ऐप कैसे बनाया जाता है, तो आप पहले से ही आधे रास्ते पर हैं। अब, स्क्रीन पर दिए गए लिंक का उपयोग करें

74
00:05:38,560 --> 00:05:42,079
दूसरा आधा बनाने के लिए एक मुफ्त convex प्रोजेक्ट बनाएँ। यह कोड रिपोर्ट रही है, देखने के लिए धन्यवाद,

75
00:05:42,079 --> 00:05:46,560
और मैं अगले में आपसे मिलूँगा।

76
00:05:46,560 --> 00:05:48,560
और मैं अगले में आपसे मिलूँगा।

