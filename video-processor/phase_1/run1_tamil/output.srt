1
00:00:00,000 --> 00:00:05,919
நேற்று அம்த்ரோபிக் இறுதியாக கிளாட் 3.7 சோனெட், மிகவும் எதிர்பார்க்கப்பட்ட பெரிய மொழி மாதிரியை வெளியிட்டது

2
00:00:05,919 --> 00:00:10,640
அது பெரும்பாலும் நிரலாளர்களால் மிகவும் விரும்பப்பட்டு, மிகவும் அச்சப்படும். அவர்களின் அறிவிப்பு வீடியோ அனைவரையும் பயமுறுத்துகிறது,

3
00:00:10,640 --> 00:00:14,720
அந்த வீடியோவில் உள்ள டாப் கமெண்ட் இந்த வீடியோக்காக காத்திருப்பவர்கள். நான் சொல்ல விரும்புவது,

4
00:00:14,720 --> 00:00:18,480
உங்கள் அரை குறைவான AI மதிப்புரைகளில் நீங்கள் இவ்வளவு நம்பிக்கையை வைத்ததில் எனக்கு மகிழ்ச்சியும் மரியாதையும்.

5
00:00:18,480 --> 00:00:22,800
நான் ஏற்கனவே அதை சோதிக்க மில்லியன் கணக்கான டோக்கன்களை எரித்துவிட்டேன், மேலும் TLDR என்பது கிளாட் 3.7

6
00:00:22,800 --> 00:00:27,679
நேராக வாயு. இது வித்தியாசமான மேட் வெப்பம், உயர்-கீ கோட் செய்யப்பட்டது கடவுள், உண்மையான உண்மைக்கு தொப்பி இல்லை.

7
00:00:27,679 --> 00:00:32,079
புதிய அடிப்படை மாதிரி நிரலாக்கத்தில் இன்னும் சிறப்பாக மாற தன்னைத்தானே அடித்தது, அதே நேரத்தில் ஒரு புதிய சிந்தனை

8
00:00:32,079 --> 00:00:37,679
மோடை டீப்சீக் R1 மற்றும் ஓபன்ஏஐ ஓ மாதிரிகளின் வெற்றியை நகலெடுக்க. ஆனால் அவர்கள் வெளியிட்ட மிகவும் பைத்தியக்காரத்தனமான விஷயம்

9
00:00:37,679 --> 00:00:42,799
கிளாட் கோட் என்று அழைக்கப்படும் ஒரு CLI கருவி, இது எந்த திட்டத்திலும் குறியீட்டை உருவாக்கவும், சோதிக்கவும் மற்றும் செயல்படுத்தவும் அனுமதிக்கிறது

10
00:00:42,799 --> 00:00:47,520
எனவே, கோட்பாட்டில் அனைத்து நிரலாளர்களையும் மாற்ற வேண்டிய ஒரு முடிவிலியான கருத்து சுழற்சியை உருவாக்குகிறது.

11
00:00:47,520 --> 00:00:51,520
அனைத்து குறியீடு செல்வாக்கு செலுத்துபவர்களும் நம்மை சமைத்ததாகச் சொல்கிறார்கள், மேலும் இன்றைய வீடியோவில் அவர்கள்

12
00:00:51,520 --> 00:00:56,640
சரி என்று கண்டுபிடிப்போம். இது பிப்ரவரி 25, 2025, மற்றும் நீங்கள் குறியீடு அறிக்கையைப் பார்க்கிறீர்கள். சில வாரங்களுக்கு முன்பு,

13
00:00:56,640 --> 00:01:01,600
அந்த்ரோபிக் AI தொழிலாளர் படையை எவ்வாறு பாதிக்கிறது என்பதைப் படித்த ஒரு ஆய்வறிக்கையை வெளியிட்டது. அவர்கள் கண்டறிந்தது என்னவென்றால்

14
00:01:01,600 --> 00:01:07,439
தொழிலாளர் படையின் 3.4% மட்டுமே இருந்தபோதிலும், 37% க்கும் அதிகமான குறிப்புகள் கணிதம் மற்றும்

15
00:01:07,439 --> 00:01:12,560
குறியீடு தொடர்புடையது. இது எந்த மனித நிரலாளர் வேலைகளையும் இன்னும் எடுக்கவில்லை என்றாலும், இது ஸ்டாக் ஓவர்ஃப்ளோவின் வேலையை எடுத்துள்ளது.

16
00:01:12,560 --> 00:01:16,480
இப்போது, ​​அங்கு ஏராளமான AI ஸ்லாட் போர்டு உள்ளது, மேலும் அதை அனைத்தையும் கண்காணிப்பது கடினம், ஆனால் வலை

17
00:01:16,480 --> 00:01:21,760
வளர்ச்சிக்காக, சிறந்த குறிகாட்டிகளில் ஒன்று வெப்டெவ் அரீனா. மேலும் கிளாட் 3.5, முந்தைய பதிப்பு,

18
00:01:21,760 --> 00:01:25,760
ஏற்கனவே அந்த லீடர்போர்டின் உச்சியில் அமர்ந்திருக்கிறது. ஆனால் மற்ற அனைத்தையும் தோராயமாக இணைத்தது

19
00:01:25,760 --> 00:01:30,239
சாஃப்ட்வேர் பொறியியல் அளவுகோலுக்கு வரும்போது, ​​அதிநவீன மாதிரிகள், இது மனிதனால் சரிபார்க்கப்பட்டது

20
00:01:30,239 --> 00:01:35,599
மற்றும் உண்மையான GitHub சிக்கல்களை அடிப்படையாகக் கொண்டது. ஆனால் புதிய 3.7 மாதிரி முற்றிலும் நசுக்கியது என்பதுதான் பைத்தியக்காரத்தனமானது

21
00:01:35,599 --> 00:01:41,120
மற்ற அனைத்து மாதிரிகளையும், ஓபன்ஏஐ, ஓ3 மினி-ஹை மற்றும் டீப்சீக் உட்பட, இப்போது தீர்க்கும் திறன் கொண்டது

22
00:01:41,120 --> 00:01:46,079
70.3% GitHub சிக்கல்கள். அளவுகோலை நம்பினால் அதுதான். மேலும் முயற்சித்த பிறகு

23
00:01:46,079 --> 00:01:50,959
கிளவுட் கோட் CLI, நான் உண்மையில் அதை நம்பலாம். இது தற்போது ஆராய்ச்சி முன்னோட்டத்தில் உள்ளது, ஆனால் நீங்கள் நிறுவலாம்

24
00:01:51,040 --> 00:01:56,719
NPM உடன் கிளவுட் CLI. இருப்பினும், இது நேரடியாக அந்த்ரோபிக் API ஐப் பயன்படுத்துகிறது, மேலும் கிளாட் இல்லை

25
00:01:56,719 --> 00:02:01,840
சிறியது, ஜெமினி ஃபிளாஷ் மற்றும் டீப்சீக் போன்ற மாதிரிகளை விட 10 மடங்கு அதிகமாக செலவாகும். ஒரு மில்லியன்

26
00:02:01,840 --> 00:02:06,480
அல்பா டோக்கன்கள் என் முழு ஆளுமையை விட அதிகமாக செலவாகும். நிறுவிய பின், உங்களுக்கு கிளாட்

27
00:02:06,480 --> 00:02:10,639
கட்டளை மற்றும் டெர்மினலுக்கு அணுகல் கிடைக்கும். மேலும் அது உங்கள் திட்டத்தில் உள்ள தற்போதைய குறியீட்டின் முழு சூழலையும் வழங்குகிறது.

28
00:02:10,639 --> 00:02:14,960
நான் உடனடியாக கவனித்த ஒரு விஷயம் என்னவென்றால், CLI இல் அவர்களின் உரை அலங்காரம் கிட்டத்தட்ட

29
00:02:14,960 --> 00:02:19,280
முன்பு இந்த சேனலில் நாம் பார்த்த ஒரு திறந்த மூல கருவியான SST உடன் ஒரே மாதிரியாக உள்ளது. அது ஒரு

30
00:02:19,280 --> 00:02:24,080
சம்பவமாக இருக்கலாம், ஆனால் கிளவுட் லோகோவும் என்னோடா பிடிச்ச ஒரு ஆசிரியரான குர்ட் வோன்நெகுட்டோட இந்த வரைபடத்தை அடிப்படையா வச்சு திருடப்பட்டதா இருக்கலாம்.

31
00:02:24,080 --> 00:02:27,919
ஆனா உங்க லோகோவை ஒரு ஸ்பிங்க்டரைப் போல வடிவமைப்பதில் தவறில்லை, நிறைய நிறுவனங்கள் அதைச் செய்கின்றன, ஆனால் கிளாட் கொஞ்சம் அதிகமாக இருக்கிறது

32
00:02:27,919 --> 00:02:32,000
இங்கே மூக்கில். ஆனால் இப்போது எனக்கு கிளாட் நிறுவப்பட்டிருக்கிறது, நான் Enit கட்டளையை இயக்க முடியும், அது ஸ்கேன் செய்யும்

33
00:02:32,000 --> 00:02:36,240
திட்டம் மற்றும் சில ஆரம்ப சூழல் மற்றும் வழிமுறைகளுடன் ஒரு மார்க் டவுன் கோப்பை உருவாக்குகிறது. அது அருமை,

34
00:02:36,240 --> 00:02:40,560
ஆனால் இப்போது நம்மிடம் ஒரு திறந்த அமர்வு உள்ளது, மேலும் நீங்கள் செய்ய விரும்பக்கூடிய ஒரு விஷயம் எவ்வளவு பணத்தை நீங்கள்

35
00:02:40,560 --> 00:02:44,400
இதுவரை கேட்டதால் இழந்தீர்கள் என்பதைப் பார்க்க வேண்டும். cost கட்டளையுடன், Enit கோப்பை உருவாக்குவதற்கு சுமார்

36
00:02:44,400 --> 00:02:49,120
8 சென்ட் செலவாகும் என்பதை நான் காணலாம். இப்போது நான் கொடுத்த முதல் உண்மையான வேலை மிகவும் எளிதானது, அது ஒரு சீரற்ற பெயரை உருவாக்குவது

37
00:02:49,120 --> 00:02:53,599
ஜெனரேட்டர் Dino இல். நீங்கள் ஒரு குறிப்பை உள்ளிட்ட பிறகு, அது என்ன செய்ய வேண்டும் என்பதை கண்டுபிடிக்கும், பின்னர் உங்களிடம்

38
00:02:53,599 --> 00:02:57,840
ஆம் அல்லது இல்லை என்று உறுதிப்படுத்தவும். இந்த வழக்கில், அது ஒரு புதிய கோப்பை உருவாக்க விரும்புகிறது. அது செல்லும்

39
00:02:57,840 --> 00:03:02,560
முன்னேறி அந்த கோப்பை கோப்பு முறைமைக்கு எழுதி, ஒரு அர்ப்பணிக்கப்பட்ட சோதனை கோப்பையும் உருவாக்கும்

40
00:03:02,560 --> 00:03:06,719
சரி. அது முக்கியம், ஏனெனில் வலுவான வகைப்படுத்தப்பட்ட மொழியை சோதனை-இயக்கப்பட்ட வளர்ச்சியுடன் பயன்படுத்துவது

41
00:03:06,719 --> 00:03:11,280
அல்லது AI எழுதிய குறியீடு உண்மையில் செல்லுபடியாகும் என்பதைச் சரிபார்க்க AI க்கு வழிகள். அந்த சோதனை தோல்வியுற்றால்,

42
00:03:11,280 --> 00:03:15,680
அது கருத்துரையைப் பயன்படுத்தி வணிக தர்க்கத்தை மீண்டும் எழுதலாம், மேலும் அது

43
00:03:15,759 --> 00:03:20,000
சரியாகப் பெறும் வரை முன்னும் பின்னும் செல்லலாம். இந்த உதாரணத்தில், நான் ஒரு சரியான குறியீடு என்று கருதும் ஒன்றை அது எழுதியது. ஆனால் இப்போது நாம் செய்வோம்

44
00:03:20,000 --> 00:03:24,240
ஒரு சவாலான ஒன்றைச் செய்யுங்கள் மற்றும் ஒரு உண்மையான காட்சி முன் முனை UI ஐ உருவாக்கச் செய்யுங்கள், ஆனால் Reactக்கு பதிலாக,

45
00:03:24,240 --> 00:03:28,879
Svelte ஐப் பயன்படுத்தும். எனது கட்டமைப்பை உருவாக்கியபோது, ​​தொழில்நுட்ப ஸ்டாக்

46
00:03:28,879 --> 00:03:33,199
TypeScript மற்றும் tailwind ஐப் பயன்படுத்துகிறது என்பதை அது புரிந்துகொள்கிறது, பின்னர் நான் அதை மிதமான சிக்கலான முன் முனை UI க்குத் தூண்டுகிறேன்,

47
00:03:33,199 --> 00:03:37,680
என் மைக்ரோஃபோனை அணுகி அலை வடிவத்தை காட்சிப்படுத்தக்கூடிய ஒரு பயன்பாடு. இந்த ஆரம்ப குறிப்பிற்குப் பிறகு,

48
00:03:37,680 --> 00:03:42,800
நான் 20 வெவ்வேறு விஷயங்களை உறுதிப்படுத்த வேண்டியிருந்தது, மேலும் நீங்கள் பார்க்க முடிந்தால், அது நிறைய புதிய கூறுகளை எழுதியது

49
00:03:42,800 --> 00:03:47,120
என் திட்டத்திற்கு. வெப் UI இல் கிளவுடைத் தூண்டுவதை விட இது அதிக நேரம் எடுத்தது, ஆனால் இறுதி முடிவு

50
00:03:47,120 --> 00:03:51,840
காத்திருப்புக்கு மதிப்புள்ளதாக இருந்தது. இங்கே பயன்பாட்டில், நான் ஒரு அலை வடிவ அதிர்வெண் மற்றும் வட்ட

51
00:03:51,840 --> 00:03:56,560
கிராஃபிக்கை கிளிக் செய்யலாம், அது என் குரலின் ஒலியை காட்சிப்படுத்துகிறது. ஒரு கட்டுப்பாட்டு அம்சமாக, எனக்கு ஓபன்ஏஐ-03 மினி-ஹை ஜெனரேட் செய்யப்பட்டது

52
00:03:56,560 --> 00:04:02,400
அதே விஷயம், முதலில் எனக்கு ஒரு பிழை வந்தது, அதை சரிசெய்வது எளிதாக இருந்தது, ஆனால் இறுதி முடிவு இப்படி இருந்தது,

53
00:04:02,400 --> 00:04:07,199
கிளவுடை விட ஒரு வெட்கக்கேடான குப்பை துண்டு. ஆனால் நெருக்கமாக ஆய்வு செய்தபோது, ​​நிறைய

54
00:04:07,199 --> 00:04:11,599
கிளவுட்டின் குறியீட்டில் பிரச்சினைகள் இருந்தன. ஒன்றுக்காக, அது TypeScript அல்லது tailwind ஐப் பயன்படுத்தவில்லை,

55
00:04:11,599 --> 00:04:15,919
அவை நம் தொழில்நுட்ப ஸ்டாக்கில் இருக்க வேண்டும் என்பதை அது அறிந்திருந்தாலும் கூட. புதியதைப் பயன்படுத்தவும் அது தவறியது

56
00:04:15,919 --> 00:04:19,199
Smelt 5 Roons தொடரியல், மற்றும் முழு அமர்வும் எனக்கு சுமார் 65 சென்ட் செலவாகும், அது

57
00:04:19,199 --> 00:04:23,759
A அல்லது வாழைப்பழத்தில் சிறப்பாக செலவிடப்பட்டிருக்கும். ஆனால் இப்போது எனக்கு இறுதி சோதனை உள்ளது. சமீபத்தில், ஆப்பிள் நிறுத்த வேண்டியிருந்தது

58
00:04:23,759 --> 00:04:29,439
UK இல் முழுமையான குறியாக்கம், ஏனெனில் அரசாங்கம் ஒரு பின்வாசல் விரும்பியது, மேலும் ஆப்பிள் மறுத்தது

59
00:04:29,439 --> 00:04:34,000
ஒன்றை உருவாக்க. நீங்கள் இதனால் பாதிக்கப்பட்டிருந்தால், நீங்கள் செய்யக்கூடிய ஒரு விஷயம் உங்கள் சொந்த முழுமையான

60
00:04:34,000 --> 00:04:37,839
குறியாக்கப்பட்ட பயன்பாட்டை உருவாக்குவது. நானே ஜாவாஸ்கிரிப்டில் அதைச் செய்ய முயற்சித்து வருகிறேன், ஆனால் ஒவ்வொரு பெரிய மொழி

61
00:04:37,920 --> 00:04:42,079
நான் முயற்சித்த மாதிரியும் தோல்வியடைகிறது. கிளாட் இதை சரிசெய்ய முடியுமா என்று பார்ப்போம் Chatchy PT குப்பை குறியீடு. அது எடுத்தது

62
00:04:42,079 --> 00:04:47,120
நிறைய நேரம் எடுத்தது மற்றும் நிறைய குறியீட்டை மாற்றியது, ஆனால் எந்த காரணத்திற்காகவும், அது இன்னும் இயங்கத் தவறிவிட்டது. மேலும்

63
00:04:47,120 --> 00:04:51,600
துரதிர்ஷ்டவசமாக, நான் AI யை மிகவும் சார்ந்துவிட்டதால், ஒரு பிழைச் செய்தியை எவ்வாறு சரிசெய்வது என்று எனக்குத் தெரியாது

64
00:04:51,600 --> 00:04:55,920
இப்படி. நான் செய்யக்கூடியது அடுத்த சிறந்த மாதிரி வெளிவர காத்திருப்பதுதான். இதன் முழுவதும்

65
00:04:55,920 --> 00:04:59,759
வீடியோவில், கிளாட் முன் முனை டெவ் எவ்வளவு நல்லது என்பதை நாம் பார்த்தோம், ஆனால் உங்கள் பயன்பாட்டின் மற்றொரு பகுதி

66
00:04:59,759 --> 00:05:04,399
பின் முனை. மேலும் நீங்கள் பயன்பாடுகளை விரைவாக உருவாக்க விரும்பினால், இன்றைய

67
00:05:04,480 --> 00:05:09,279
வீடியோவின் ஸ்பான்சரான convex ஐ நீங்கள் முயற்சி செய்ய வேண்டும். இது வகை-பாதுகாப்பான வினவல்களை வழங்கும் ஒரு திறந்த மூல எதிர்வினை தரவுத்தளம்,

68
00:05:09,279 --> 00:05:14,560
அட்டவணைப்படுத்தப்பட்ட வேலைகள், சர்வர் செயல்பாடுகள், ஃபயர்பேஸ் போன்ற உண்மையான நேர தரவு ஒத்திசைவு, அதன் சில அம்சங்களை பெயரிட.

69
00:05:14,560 --> 00:05:19,199
தரவுத்தள வினவல்கள் தூய TypeScript இல் எழுதப்பட்டிருந்தாலும் சிறந்தது, இது நமக்கு இந்த அழகான

70
00:05:19,199 --> 00:05:23,600
முழு ஸ்டாக்கிலும் IDE ஆட்டோகம்பிளீட். ஆனால் அது மற்றொரு பக்க விளைவையும் உருவாக்குகிறது,

71
00:05:23,600 --> 00:05:28,240
AI உடன் தன்னாட்சி வைப் குறியீட்டில் convex மிகவும் நல்லது. கிளாட் போன்ற மாதிரிகள் எளிதாக

72
00:05:28,240 --> 00:05:33,680
convex குறியீட்டைப் புரிந்து கொள்ளலாம், குறைவான பிழைகளுடன் எழுதலாம், இதனால் அதனுடன் அதிக உற்பத்தித்திறன் கொண்டதாக இருக்கலாம். உங்களுக்குத் தெரிந்தால்

73
00:05:33,680 --> 00:05:38,560
முன் முனை பயன்பாட்டை எவ்வாறு உருவாக்குவது என்பது உங்களுக்குத் தெரிந்தால், நீங்கள் ஏற்கனவே பாதியில் இருக்கிறீர்கள். இப்போது, ​​திரையில் உள்ள இணைப்பைப் பயன்படுத்தவும்

74
00:05:38,560 --> 00:05:42,079
மற்றொரு பகுதியை உருவாக்க ஒரு இலவச convex திட்டத்தை உருவாக்க. இது குறியீடு அறிக்கையாக இருந்தது, பார்த்ததற்கு நன்றி,

75
00:05:42,079 --> 00:05:46,560
அடுத்ததில் சந்திப்பேன்.

76
00:05:46,560 --> 00:05:48,560
 

