1
00:00:00,000 --> 00:00:05,919
நேற்று அந்த்ரோபிக் இறுதியாக கிளாட் 3.7 சோனெட், மிகவும் எதிர்பார்க்கப்பட்ட பெரிய மொழி மாதிரியை வெளியிட்டது

2
00:00:05,919 --> 00:00:10,640
அது நிரலாளர்களால் மிகவும் விரும்பப்பட்டு, மிகவும் அஞ்சப்படுகிறது. அவர்களின் அறிவிப்பு வீடியோ அனைவரையும் பயமுறுத்துகிறது,

3
00:00:10,640 --> 00:00:14,720
அந்த வீடியோவில் உள்ள டாப் கமெண்ட், இந்த வீடியோக்காக காத்திருப்பவர்கள். நான் சொல்ல விரும்புவது,

4
00:00:14,720 --> 00:00:18,480
உங்கள் அரை குறைவான AI மதிப்புரைகளில் நீங்கள் இவ்வளவு நம்பிக்கை வைத்ததற்கு நான் மகிழ்ச்சியடைகிறேன் மற்றும் கௌரவிக்கிறேன்.

5
00:00:18,480 --> 00:00:22,800
நான் ஏற்கனவே மில்லியன் கணக்கான டோக்கன்களை அதை சோதித்துப் பார்த்துவிட்டேன், மேலும் TLDR என்பது கிளாட் 3.7

6
00:00:22,800 --> 00:00:27,679
நேரடியாக வாயு. இது வித்தியாசமான மேட் வெப்பம், உயர்-கீ கோட் செய்யப்பட்டது கடவுள், உண்மையான உண்மைக்கு தொப்பி இல்லை.

7
00:00:27,679 --> 00:00:32,079
புதிய அடிப்படை மாதிரி நிரலாக்கத்தில் இன்னும் சிறப்பாக மாற தன்னைத்தானே அடித்தது, அதே நேரத்தில் புதிய சிந்தனை

8
00:00:32,079 --> 00:00:37,679
மோடைக் கூட்டி DeepSeq R1 மற்றும் OpenAI O மாதிரிகளின் வெற்றியை நகலெடுக்கிறது. ஆனால் அவர்கள் வெளியிட்ட மிகவும் பைத்தியக்காரத்தனமான விஷயம்

9
00:00:37,679 --> 00:00:42,799
கிளாட் கோட் என்று அழைக்கப்படும் ஒரு CLI கருவி, இது எந்த திட்டத்திலும் குறியீட்டை உருவாக்கவும், சோதிக்கவும் மற்றும் செயல்படுத்தவும் அனுமதிக்கிறது

10
00:00:42,799 --> 00:00:47,520
எனவே, கோட்பாட்டில் அனைத்து நிரலாளர்களையும் மாற்ற வேண்டும் என்ற எல்லையற்ற கருத்து சுழற்சியை உருவாக்குகிறது.

11
00:00:47,520 --> 00:00:51,520
அனைத்து குறியீடு செல்வாக்கு செலுத்துபவர்களும் நம்மை சமைத்ததாகச் சொல்கிறார்கள், மேலும் இன்றைய வீடியோவில் அவர்கள்

12
00:00:51,520 --> 00:00:56,640
சரியா என்பதை கண்டுபிடிப்போம். இது பிப்ரவரி 25, 2025, மேலும் நீங்கள் குறியீடு அறிக்கையைப் பார்க்கிறீர்கள். சில வாரங்களுக்கு முன்பு,

13
00:00:56,640 --> 00:01:01,600
அந்த்ரோபிக் AI தொழிலாளர் படையை எவ்வாறு பாதிக்கிறது என்பதைப் படித்த ஒரு ஆய்வறிக்கையை வெளியிட்டது. அவர்கள் கண்டறிந்தது என்னவென்றால்

14
00:01:01,600 --> 00:01:07,439
தொழிலாளர் படையின் 3.4% மட்டுமே இருந்தபோதிலும், 37% க்கும் அதிகமான குறிப்புகள் கணிதம் மற்றும்

15
00:01:07,439 --> 00:01:12,560
குறியீடு தொடர்புடையது. இது எந்த மனித நிரலாளர் வேலைகளையும் இன்னும் எடுக்கவில்லை என்றாலும், இது Stack Overflow இன் வேலையை எடுத்துள்ளது.

16
00:01:12,560 --> 00:01:16,560
இப்போது, ​​அங்கு ஏராளமான AI ஸ்லாட் போர்டு உள்ளது, மேலும் அதை அனைத்தையும் கண்காணிப்பது கடினம், ஆனால் வலை

17
00:01:16,560 --> 00:01:21,760
வளர்ச்சிக்காக, சிறந்த குறிகாட்டிகளில் ஒன்று வலை வளர்ச்சி அரங்கம். கிளாட் 3.5, முந்தைய பதிப்பு,

18
00:01:21,760 --> 00:01:25,760
ஏற்கனவே அந்த லீடர்போர்டில் உள்ளது. ஆனால் அது மற்ற அனைத்தையும் தோராயமாக இணைத்தது

19
00:01:25,760 --> 00:01:29,680
சாஃப்ட்வேர் பொறியியல் அளவுகோலுக்கு வரும்போது, ​​அது மனிதன்

20
00:01:29,680 --> 00:01:35,200
சரிபார்க்கப்பட்டது மற்றும் உண்மையான GitHub சிக்கல்களை அடிப்படையாகக் கொண்டது. இருப்பினும், பைத்தியக்காரத்தனமான விஷயம் என்னவென்றால், புதிய 3.7 மாதிரி முற்றிலும்

21
00:01:35,200 --> 00:01:40,640
மற்ற அனைத்து மாதிரிகளையும், OpenAI, O3 Mini High மற்றும் Deepseek ஆகியவற்றையும் நசுக்கி, இப்போது

22
00:01:40,640 --> 00:01:46,079
70.3% GitHub சிக்கல்களை தீர்க்கும் திறன் கொண்டது. அளவுகோலை நம்பினால் அதுதான். கிளாட் கோட் CLI ஐ முயற்சித்த பிறகு,

23
00:01:46,079 --> 00:01:50,719
நான் உண்மையில் அதை நம்பலாம். இது தற்போது ஆராய்ச்சி முன்னோட்டத்தில் உள்ளது, ஆனால் நீங்கள்

24
00:01:50,719 --> 00:01:55,920
NPM உடன் கிளாட் CLI ஐ நிறுவலாம். இருப்பினும், இது நேரடியாக அந்த்ரோபிக் API ஐப் பயன்படுத்துகிறது,

25
00:01:55,920 --> 00:02:00,640
கிளாட் மலிவானது அல்ல, ஜெமினி ஃபிளாஷ் மற்றும் டீப்சீக் போன்ற மாதிரிகளை விட 10 மடங்கு அதிகமாக செலவாகும்.

26
00:02:00,640 --> 00:02:05,599
ஒரு மில்லியன் அல்பா டோக்கன்களுக்கு $15 எனது முழு ஆளுமையை விட அதிகமாக செலவாகும். நிறுவியதும், உங்களிடம்

27
00:02:05,599 --> 00:02:09,599
டெர்மினலில் கிளாட் கட்டளைக்கு அணுகல் கிடைக்கும். அது உங்கள் திட்டத்தில் உள்ள தற்போதைய

28
00:02:09,599 --> 00:02:13,520
குறியீட்டின் முழு சூழலையும் கொடுக்கிறது. எனினும், நான் உடனடியாக கவனித்த ஒரு விஷயம் என்னவென்றால், அவர்களின் உரை அலங்காரம்

29
00:02:13,520 --> 00:02:18,719
CLI இல் SST ஐப் போலவே இருக்கிறது. முன்பு இந்த சேனலில் நாம் பார்த்த திறந்த மூல கருவி.

30
00:02:18,719 --> 00:02:23,120
அது ஒரு தற்செயல் நிகழ்வாக இருக்கலாம், ஆனால் கிளாட் லோகோவும் திருடப்பட்டதாகத் தோன்றுகிறது,

31
00:02:23,120 --> 00:02:26,479
எனது விருப்பமான எழுத்தாளர்களில் ஒருவரான குர்ட் வோன்நெகுட்டின் இந்த மலக்குடல் வரைபடத்தை அடிப்படையாகக் கொண்டது.

32
00:02:26,479 --> 00:02:30,319
இப்போது உங்கள் லோகோவை ஒரு மலக்குடலைப் போல வடிவமைப்பதில் எந்த தவறும் இல்லை, ஏராளமான நிறுவனங்கள் அதைச் செய்கின்றன,

33
00:02:30,319 --> 00:02:34,159
ஆனால் கிளாட் இங்கே கொஞ்சம் அதிகமாக இருக்கிறது என்று நினைக்கிறேன். ஆனால் இப்போது கிளாட் நிறுவியுள்ளேன்,

34
00:02:34,159 --> 00:02:38,159
நான் init கட்டளையை இயக்க முடியும், அது திட்டத்தை ஸ்கேன் செய்து, சிலவற்றைக் கொண்ட மார்க் டவுன் கோப்பை உருவாக்கும்

35
00:02:38,159 --> 00:02:42,639
ஆரம்ப சூழல் மற்றும் வழிமுறைகள். அது நன்றாக இருக்கிறது, ஆனால் இப்போது நம்மிடம் ஒரு திறந்த அமர்வு உள்ளது, மேலும் நீங்கள்

36
00:02:42,639 --> 00:02:46,960
செய்ய விரும்பலாம் என்பது இதுவரை எவ்வளவு பணத்தை இழந்துவிட்டீர்கள் என்பதைப் பார்ப்பது. cost கட்டளையுடன்,

37
00:02:46,960 --> 00:02:51,199
அந்த init கோப்பை உருவாக்குவதற்கு சுமார் எட்டு சென்ட் செலவாகியுள்ளது என்பதை நான் காண்கிறேன். இப்போது நான் கொடுத்த முதல் உண்மையான வேலை

38
00:02:51,199 --> 00:02:55,840
மிகவும் எளிதாக இருந்தது, மேலும் அது டைனோவில் ஒரு ரேண்டம் பெயர் ஜெனரேட்டரை உருவாக்குவது. நீங்கள் ஒரு குறிப்பை உள்ளிட்ட பிறகு,

39
00:02:55,840 --> 00:03:00,240
அது என்ன செய்ய வேண்டும் என்பதை கண்டுபிடித்து, பின்னர் ஆம் அல்லது இல்லை என்று உறுதிப்படுத்திக் கொள்ளும். இந்த வழக்கில் போலவே,

40
00:03:00,240 --> 00:03:04,240
இங்கே அது ஒரு புதிய கோப்பை உருவாக்க விரும்புகிறது. அது முன்னேறி அந்த கோப்பை கோப்பு அமைப்பில் எழுதும்,

41
00:03:04,240 --> 00:03:08,479
பின்னர் அது ஒரு அர்ப்பணிக்கப்பட்ட சோதனை கோப்பையும் உருவாக்குகிறது. அது முக்கியம், ஏனெனில்

42
00:03:08,479 --> 00:03:12,960
வலுவான வகைப்படுத்தப்பட்ட மொழியுடன் சோதனை-இயக்கப்பட்ட வளர்ச்சியைப் பயன்படுத்துவது, அல்லது AI அது எழுதிய குறியீடு உண்மையில் செல்லுபடியாகும் என்பதைச் சரிபார்க்கும் வழிகள்.

43
00:03:12,960 --> 00:03:17,439
அந்த சோதனை தோல்வியுற்றால், அது மீண்டும் எழுத கருத்துகளைப் பயன்படுத்தலாம்

44
00:03:17,439 --> 00:03:21,599
வணிக தர்க்கம், மேலும் சரியாகப் பெறும் வரை முன்னும் பின்னும் செல்லவும். இந்த உதாரணத்தில்,

45
00:03:21,599 --> 00:03:25,280
அது நான் சரியான குறியீடாகக் கருதுவதை எழுதியது. ஆனால் இப்போது இன்னும் சவாலான ஒன்றைச் செய்வோம்,

46
00:03:25,280 --> 00:03:29,759
மேலும் அதை ஒரு உண்மையான விஷுவல் முன் முனை UI ஐ உருவாக்கச் செய்வோம், ஆனால் Reactக்கு பதிலாக, Svelte ஐப் பயன்படுத்துவோம்.

47
00:03:29,759 --> 00:03:34,000
கான்ஃபிக்கை உருவாக்கியபோது, ​​அது TypeScript ஐப் பயன்படுத்தும் உரை ஸ்டாக்கைப் புரிந்துகொள்கிறது என்பதை நீங்கள் கவனிப்பீர்கள்

48
00:03:34,000 --> 00:03:38,639
மற்றும் Tailwind, பின்னர் நான் அதை மிதமான சிக்கலான முன் முனை UI க்கு தூண்டுகிறேன், என் மைக்ரோஃபோனை அணுகக்கூடிய பயன்பாடு

49
00:03:38,639 --> 00:03:43,520
ஒலி அலை வடிவத்தை காண்பிக்கும். இந்த ஆரம்ப குறிப்புக்குப் பிறகு, நான் உறுதிப்படுத்த வேண்டியிருந்தது

50
00:03:43,520 --> 00:03:48,000
சுமார் 20 வெவ்வேறு விஷயங்கள், நீங்கள் பார்க்க முடிந்தபடி, அது எனது திட்டத்திற்கு ஏராளமான புதிய கூறுகளை எழுதியது.

51
00:03:48,000 --> 00:03:52,319
இது வலை UI இல் கிளாட் குறிப்பிடுவதை விட அதிக நேரம் எடுத்தது, ஆனால் இறுதி முடிவு மதிப்புக்குரியது

52
00:03:52,319 --> 00:03:57,199
எடை. பயன்பாட்டில் இங்கே, நான் ஒரு ஒலி அலை வடிவ அதிர்வெண் மற்றும் வட்ட வரைபடத்தைக் கிளிக் செய்யலாம்

53
00:03:57,199 --> 00:04:02,719
என் குரலின் ஒலியை காண்பிக்கும். ஒரு கட்டுப்பாட்டு அளவாக, நான் OpenAI-03 மினி-ஹை அதே

54
00:04:02,719 --> 00:04:07,199
விஷயத்தை உருவாக்கச் செய்தேன், முதலில் எனக்கு ஒரு பிழை வந்தது, அதை சரிசெய்வது எளிதாக இருந்தது, ஆனால் இறுதி முடிவு இப்படி இருந்தது.

55
00:04:07,280 --> 00:04:10,960
கிளாட் உடன் ஒப்பிடும்போது ஒரு வெட்கக்கேடான குப்பை, ஆனால் நெருக்கமாக ஆய்வு செய்த பிறகு,

56
00:04:10,960 --> 00:04:15,520
கிளாட் குறியீட்டில் ஏராளமான பிரச்சினைகள் இருந்தன. ஒன்றுக்காக, அது TypeScript அல்லது Tailwind ஐப் பயன்படுத்தவில்லை

57
00:04:15,520 --> 00:04:19,279
எல்லாம், அவை நம் உரை ஸ்டாக்கில் இருப்பதை அது அறிந்திருக்க வேண்டும் என்றாலும். புதியதைப் பயன்படுத்தவும் தவறியது

58
00:04:19,279 --> 00:04:24,079
Smelt 5 runes தொடரியல், மற்றும் முழு அமர்வும் எனக்கு சுமார் 65 சென்ட் செலவாகும், அது சிறப்பாக இருந்திருக்கும்

59
00:04:24,079 --> 00:04:29,439
A அல்லது வாழைப்பழத்தில் செலவிடப்பட்டது. ஆனால் இப்போது எனக்கு இறுதி சோதனை உள்ளது. சமீபத்தில், ஆப்பிள் நிறுத்த வேண்டியிருந்தது

60
00:04:29,439 --> 00:04:33,920
UK இல் முழுமையான குறியாக்கம், ஏனெனில் அரசாங்கம் ஒரு பின்வாசல் விரும்பியது, மேலும் ஆப்பிள் மறுத்தது

61
00:04:34,560 --> 00:04:37,920
ஒன்றை உருவாக்க. நீங்கள் இதனால் பாதிக்கப்பட்டிருந்தால், நீங்கள் செய்யக்கூடிய ஒரு விஷயம் உங்கள் சொந்த முழுமையான

62
00:04:37,920 --> 00:04:42,079
குறியாக்கப்பட்ட பயன்பாட்டை உருவாக்குவது. நானே ஜாவாஸ்கிரிப்டில் அதைச் செய்ய முயற்சித்து வருகிறேன், ஆனால் ஒவ்வொரு பெரிய மொழி

63
00:04:42,079 --> 00:04:47,120
நான் முயற்சித்த மாதிரி தோல்வியடைகிறது. கிளாட் இந்த சாட்சி PT குப்பை குறியீட்டை சரிசெய்ய முடியுமா என்று பார்ப்போம். அது எடுத்தது

64
00:04:47,120 --> 00:04:51,519
கணிசமான நேரம் மற்றும் குறியீட்டில் பல மாற்றங்களைச் செய்தது, ஆனால் எந்தக் காரணத்திற்காகவோ, அது இன்னும் இயங்கத் தவறிவிட்டது.

65
00:04:51,519 --> 00:04:55,600
துரதிர்ஷ்டவசமாக, நான் AI யை மிகவும் சார்ந்துவிட்டதால், ஒரு பிழையை எவ்வாறு சரிசெய்வது என்று எனக்குத் தெரியவில்லை

66
00:04:55,600 --> 00:04:59,600
இது போன்ற செய்தி. நான் உண்மையில் செய்யக்கூடியது அடுத்த சிறந்த மாதிரி வெளிவர காத்திருப்பதுதான். முழுவதும்

67
00:05:00,319 --> 00:05:04,240
இந்த வீடியோவில், கிளாட் முன்-முனை வளர்ச்சியில் எவ்வளவு நல்லது என்பதை நாம் பார்த்தோம், ஆனால் உங்கள் பயன்பாட்டின் மற்றொரு பாதியும்

68
00:05:04,240 --> 00:05:08,959
பின்-முனை. நீங்கள் வேகமாக பயன்பாடுகளை உருவாக்க விரும்பினால், இன்றைய

69
00:05:08,959 --> 00:05:13,519
வீடியோவின் ஸ்பான்சரான Convex ஐ நீங்கள் முயற்சிக்க வேண்டும். இது வகை-பாதுகாப்பான வினவல்களை வழங்கும் ஒரு திறந்த மூல எதிர்வினை தரவுத்தளம்,

70
00:05:13,519 --> 00:05:18,639
திட்டமிடப்பட்ட வேலைகள், சர்வர் செயல்பாடுகள், ரியல்-டைம் தரவு ஒத்திசைவு போன்ற Firebase, அதன் சிலவற்றை பெயரிட

71
00:05:18,639 --> 00:05:23,120
அம்சங்கள். இருப்பினும், தரவுத்தள வினவல்கள் தூய TypeScript இல் எழுதப்பட்டுள்ளன, இது நமக்கு இதை வழங்குகிறது

72
00:05:23,120 --> 00:05:28,240
முழு ஸ்டாக்கிலும் அழகான IDE ஆட்டோகம்பிளீட். ஆனால் அது மற்றொரு பக்க விளைவையும் உருவாக்குகிறது,

73
00:05:28,240 --> 00:05:33,279
Convex ஐ AI உடன் தன்னாட்சி வைப் குறியீட்டில் மிகவும் நல்லதாக மாற்றுகிறது. கிளாட் போன்ற மாதிரிகள் அதிகமாக

74
00:05:33,279 --> 00:05:38,240
எளிதாக Convex குறியீட்டைப் புரிந்து கொள்ளலாம், குறைவான பிழைகளுடன் அதை எழுதலாம், இதனால் அதனுடன் அதிக உற்பத்தித்திறன் கொண்டதாக இருக்கும்.

75
00:05:38,240 --> 00:05:41,519
முன்-முனை பயன்பாட்டை எவ்வாறு உருவாக்குவது என்று உங்களுக்குத் தெரிந்தால், நீங்கள் ஏற்கனவே பாதியிலேயே இருக்கிறீர்கள். இப்போது இணைப்பைப் பயன்படுத்தவும்

76
00:05:41,519 --> 00:05:45,600
திரையில் இன்னொரு பாதியை உருவாக்க இலவச Convex திட்டத்தை உருவாக்க. இது குறியீடு அறிக்கையாக இருந்தது,

77
00:05:45,600 --> 00:05:48,079
பார்த்ததற்கு நன்றி, அடுத்ததில் சந்திப்போம்.

